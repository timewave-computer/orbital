{
  "contract_name": "orbital-auction",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "auction_phase_config",
      "batch_size",
      "route_config",
      "solver_bond"
    ],
    "properties": {
      "auction_phase_config": {
        "$ref": "#/definitions/AuctionPhaseConfig"
      },
      "batch_size": {
        "$ref": "#/definitions/Uint128"
      },
      "route_config": {
        "$ref": "#/definitions/RouteConfig"
      },
      "solver_bond": {
        "$ref": "#/definitions/Coin"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "AuctionPhaseConfig": {
        "description": "orbital auction operates in discrete-time based rounds. each round consists of the following phases, in order: - auction: bidding window where solvers can submit their bids - filling: window where the auction is finalized and orders are matched - cleanup: window where the auction is reset and the next round is prepared",
        "type": "object",
        "required": [
          "auction_duration",
          "cleanup_window_duration",
          "filling_window_duration"
        ],
        "properties": {
          "auction_duration": {
            "$ref": "#/definitions/Duration"
          },
          "cleanup_window_duration": {
            "$ref": "#/definitions/Duration"
          },
          "filling_window_duration": {
            "$ref": "#/definitions/Duration"
          }
        },
        "additionalProperties": false
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Duration": {
        "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "height"
            ],
            "properties": {
              "height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Time in seconds",
            "type": "object",
            "required": [
              "time"
            ],
            "properties": {
              "time": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "RouteConfig": {
        "type": "object",
        "required": [
          "ask_denom",
          "dest_domain",
          "offer_denom",
          "src_domain"
        ],
        "properties": {
          "ask_denom": {
            "type": "string"
          },
          "dest_domain": {
            "type": "string"
          },
          "offer_denom": {
            "type": "string"
          },
          "src_domain": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "adds an order to the auction to be executed on the next round. only callable by orbital-core which is responsible for escrowing orders.",
        "type": "object",
        "required": [
          "add_order"
        ],
        "properties": {
          "add_order": {
            "$ref": "#/definitions/UserIntent"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "finalizes the current auction round and prepares for the next",
        "type": "object",
        "required": [
          "tick"
        ],
        "properties": {
          "tick": {
            "type": "object",
            "required": [
              "mock_fill_status"
            ],
            "properties": {
              "mock_fill_status": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "pause the auction, stopping any new orders from being accepted",
        "type": "object",
        "required": [
          "pause"
        ],
        "properties": {
          "pause": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "resume the auction, allowing new orders to be accepted",
        "type": "object",
        "required": [
          "resume"
        ],
        "properties": {
          "resume": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "post a bond to participate in the auction",
        "type": "object",
        "required": [
          "post_bond"
        ],
        "properties": {
          "post_bond": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "withdraw the posted bond",
        "type": "object",
        "required": [
          "withdraw_bond"
        ],
        "properties": {
          "withdraw_bond": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "bid on the current auction",
        "type": "object",
        "required": [
          "bid"
        ],
        "properties": {
          "bid": {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "UserIntent": {
        "type": "object",
        "required": [
          "amount",
          "ask_domain",
          "offer_domain",
          "user"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "ask_domain": {
            "type": "string"
          },
          "offer_domain": {
            "type": "string"
          },
          "user": {
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "admin"
        ],
        "properties": {
          "admin": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "auction_config"
        ],
        "properties": {
          "auction_config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "orderbook"
        ],
        "properties": {
          "orderbook": {
            "type": "object",
            "properties": {
              "from": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "posted_bond"
        ],
        "properties": {
          "posted_bond": {
            "type": "object",
            "required": [
              "solver"
            ],
            "properties": {
              "solver": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "active_round"
        ],
        "properties": {
          "active_round": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "auction_phase"
        ],
        "properties": {
          "auction_phase": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "type": "string",
    "enum": []
  },
  "sudo": null,
  "responses": {
    "active_round": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AuctionRound",
      "type": "object",
      "required": [
        "batch",
        "id",
        "phases"
      ],
      "properties": {
        "batch": {
          "$ref": "#/definitions/Batch"
        },
        "id": {
          "$ref": "#/definitions/Uint64"
        },
        "phases": {
          "$ref": "#/definitions/RoundPhaseExpirations"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Batch": {
          "type": "object",
          "required": [
            "batch_capacity",
            "batch_size",
            "user_intents"
          ],
          "properties": {
            "batch_capacity": {
              "$ref": "#/definitions/Uint128"
            },
            "batch_size": {
              "$ref": "#/definitions/Uint128"
            },
            "current_bid": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Bid"
                },
                {
                  "type": "null"
                }
              ]
            },
            "user_intents": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserIntent"
              }
            }
          },
          "additionalProperties": false
        },
        "Bid": {
          "type": "object",
          "required": [
            "amount",
            "bid_block",
            "solver"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "bid_block": {
              "$ref": "#/definitions/BlockInfo"
            },
            "solver": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        },
        "BlockInfo": {
          "type": "object",
          "required": [
            "chain_id",
            "height",
            "time"
          ],
          "properties": {
            "chain_id": {
              "type": "string"
            },
            "height": {
              "description": "The height of a block is the number of blocks preceding it in the blockchain.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "time": {
              "description": "Absolute time of the block creation in seconds since the UNIX epoch (00:00:00 on 1970-01-01 UTC).\n\nThe source of this is the [BFT Time in Tendermint](https://github.com/tendermint/tendermint/blob/58dc1726/spec/consensus/bft-time.md), which has the same nanosecond precision as the `Timestamp` type.\n\n# Examples\n\nUsing chrono:\n\n``` # use cosmwasm_std::{Addr, BlockInfo, ContractInfo, Env, MessageInfo, Timestamp, TransactionInfo}; # let env = Env { #     block: BlockInfo { #         height: 12_345, #         time: Timestamp::from_nanos(1_571_797_419_879_305_533), #         chain_id: \"cosmos-testnet-14002\".to_string(), #     }, #     transaction: Some(TransactionInfo { index: 3 }), #     contract: ContractInfo { #         address: Addr::unchecked(\"contract\"), #     }, # }; # extern crate chrono; use chrono::NaiveDateTime; let seconds = env.block.time.seconds(); let nsecs = env.block.time.subsec_nanos(); let dt = NaiveDateTime::from_timestamp(seconds as i64, nsecs as u32); ```\n\nCreating a simple millisecond-precision timestamp (as used in JavaScript):\n\n``` # use cosmwasm_std::{Addr, BlockInfo, ContractInfo, Env, MessageInfo, Timestamp, TransactionInfo}; # let env = Env { #     block: BlockInfo { #         height: 12_345, #         time: Timestamp::from_nanos(1_571_797_419_879_305_533), #         chain_id: \"cosmos-testnet-14002\".to_string(), #     }, #     transaction: Some(TransactionInfo { index: 3 }), #     contract: ContractInfo { #         address: Addr::unchecked(\"contract\"), #     }, # }; let millis = env.block.time.nanos() / 1_000_000; ```",
              "allOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "RoundPhaseExpirations": {
          "type": "object",
          "required": [
            "auction_expiration",
            "cleanup_expiration",
            "filling_expiration",
            "start_expiration"
          ],
          "properties": {
            "auction_expiration": {
              "$ref": "#/definitions/Expiration"
            },
            "cleanup_expiration": {
              "$ref": "#/definitions/Expiration"
            },
            "filling_expiration": {
              "$ref": "#/definitions/Expiration"
            },
            "start_expiration": {
              "$ref": "#/definitions/Expiration"
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        },
        "UserIntent": {
          "type": "object",
          "required": [
            "amount",
            "ask_domain",
            "offer_domain",
            "user"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "ask_domain": {
              "type": "string"
            },
            "offer_domain": {
              "type": "string"
            },
            "user": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "admin": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Addr",
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "auction_config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AuctionConfig",
      "type": "object",
      "required": [
        "auction_phases",
        "batch_size",
        "route_config",
        "solver_bond"
      ],
      "properties": {
        "auction_phases": {
          "$ref": "#/definitions/AuctionPhaseConfig"
        },
        "batch_size": {
          "$ref": "#/definitions/Uint128"
        },
        "route_config": {
          "$ref": "#/definitions/RouteConfig"
        },
        "solver_bond": {
          "$ref": "#/definitions/Coin"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "AuctionPhaseConfig": {
          "description": "orbital auction operates in discrete-time based rounds. each round consists of the following phases, in order: - auction: bidding window where solvers can submit their bids - filling: window where the auction is finalized and orders are matched - cleanup: window where the auction is reset and the next round is prepared",
          "type": "object",
          "required": [
            "auction_duration",
            "cleanup_window_duration",
            "filling_window_duration"
          ],
          "properties": {
            "auction_duration": {
              "$ref": "#/definitions/Duration"
            },
            "cleanup_window_duration": {
              "$ref": "#/definitions/Duration"
            },
            "filling_window_duration": {
              "$ref": "#/definitions/Duration"
            }
          },
          "additionalProperties": false
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Duration": {
          "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "height"
              ],
              "properties": {
                "height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Time in seconds",
              "type": "object",
              "required": [
                "time"
              ],
              "properties": {
                "time": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "RouteConfig": {
          "type": "object",
          "required": [
            "ask_denom",
            "dest_domain",
            "offer_denom",
            "src_domain"
          ],
          "properties": {
            "ask_denom": {
              "type": "string"
            },
            "dest_domain": {
              "type": "string"
            },
            "offer_denom": {
              "type": "string"
            },
            "src_domain": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "auction_phase": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AuctionPhase",
      "type": "string",
      "enum": [
        "bidding",
        "filling",
        "cleanup",
        "out_of_sync"
      ]
    },
    "orderbook": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_UserIntent",
      "type": "array",
      "items": {
        "$ref": "#/definitions/UserIntent"
      },
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "UserIntent": {
          "type": "object",
          "required": [
            "amount",
            "ask_domain",
            "offer_domain",
            "user"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "ask_domain": {
              "type": "string"
            },
            "offer_domain": {
              "type": "string"
            },
            "user": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "posted_bond": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Coin",
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
